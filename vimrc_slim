set nocompatible              " be iMproved, required
set nrformats=                 " treats all numbers as decimal numbers, whether they are prefixed with 0 or not

"filetype plugin on    " required
filetype indent on    " required
filetype on    " required

"encoding
let $LANG='ja_JP.UTF-8'
set encoding=utf-8
set fileencodings=utf-8,cp932
set fileformats=unix,dos,mac
set cursorline  "Highlight the current line.
set smartindent "Smart indentation
syntax on       "Show syntax color 
set relativenumber      "Show line number(relative) 
set number      "Show line number 
set incsearch   "Incremental search 
set ignorecase  " Search regardless of case
set showmatch   "Emphasize the corresponding parentheses when entering parentheses
set showmode    "Show mode
set backspace=2 "Newlines and indents can now be removed with backspace
set title       "Show the name of the file being edited
set ruler       "Show the ruler (which displays the number of lines in the lower right corner)
set shiftwidth=4 "Number of tabs at line break for autoindent
set expandtab "Don't replace tabs with spaces
set tabstop=2 "Display width for Tab characters other than at the beginning of a line
set shiftwidth=2 "Display width of the Tab character at the beginning of a line
set noswapfile  "Don't create a swap file
set nobackup    "Don't create a backup file
set hlsearch    "Highlight search results
set wrapscan    "When you reach the end of the search results, search again from the beginning
set wildmenu wildmode=list:full   "Enhanced completion functions
set nowrap        "No wrapping of long lines
set undolevels=100 "Number of undoable items
set cursorline "draw a horizontal line
set laststatus=2
colorscheme desert
set t_Co=256

"Change settings by file extension
autocmd BufNewFile,BufRead *.{md,txt} silent setlocal filetype=markdown 
autocmd BufNewFile,BufRead *.{md,txt} silent
"vim background transparency
highlight Normal ctermbg=none
highlight NonText ctermbg=none
highlight LineNr ctermbg=none
highlight Folded ctermbg=none
highlight EndOfBuffer ctermbg=none 

"settings for kannokanno/previm?
autocmd BufRead,BufNewFile *.md silent set filetype=markdown

"press <F6> key then insert timstamp and change insert mode.
nmap <F6> <ESC>i<C-R>=strftime("%Y/%m/%d_%H:%M")<CR>

" Visualization of double-byte spaces, spaces at the end of lines, and tabs. 
set list
set listchars=tab:»-,trail:-,extends:»,precedes:«,nbsp:%

" For json settings
autocmd BufNewFile,BufRead *.json set filetype=json

" Clipboard cooperation between vim and desktop
set clipboard&
set clipboard^=unnamedplus

"For AutoCompletion
" Navigate the complete menu items like CTRL+n / CTRL+p would.
inoremap <expr> <Down> pumvisible() ? "<C-n>" :"<Down>"
inoremap <expr> <Up> pumvisible() ? "<C-p>" : "<Up>"
" Select the complete menu item like CTRL+y would.
inoremap <expr> <Right> pumvisible() ? "<C-y>" : "<Right>"
inoremap <expr> <CR> pumvisible() ? "<C-y>" :"<CR>"
" Cancel the complete menu item like CTRL+e would.
inoremap <expr> <Left> pumvisible() ? "<C-e>" : "<Left>"

" vim yank settings for mingw32
if has('win32unix')
"  vnoremap "*y :'<,'>w !cat > /dev/clipboard
  vnoremap y "+y
  vnoremap p "+p
endif

" "0p paste keymap
vnoremap <silent> <C-p> "0p<CR>

" for dockerfile syntax
autocmd BufNewFile,BufRead Dockerfile* set syntax=dockerfile

" for Git
"function! GitBranch()
"  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
"endfunction
"
"function! StatuslineGit()
"  let l:branchname = GitBranch()
"  return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
"endfunction

set statusline=
set statusline=%#PmenuSel#
"set statusline+=%{StatuslineGit()} "Show GitBranch
set statusline+=%#LineNr#
set statusline+=\ %f  " Show file name
set statusline+=%m "Check indication of changes
set statusline+=%#CursorColumn#
set statusline+=%y  " Show file type
set statusline+=[ENC=%{&fileencoding}] " Show fileencoding
set statusline+=[LOW=%l/%L] "Show current row count/total row count
set statusline+=%r  " Show readonly flag
set statusline+=\ %p%%

" vim startup measurement
command! Profile call s:command_profile()
function! s:command_profile() abort
  profile start ~/profile.txt
  profile func *
  profile file *
endfunction

